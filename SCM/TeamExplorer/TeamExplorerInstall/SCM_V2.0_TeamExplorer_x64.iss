; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "TeamExplorer"
#define MyAppVersion "2.0.1"
#define MyAppPublisher "lambda, Inc."
#define MyAppURL "http://www.lambda.com/"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{F25E5382-8402-46E0-B533-FF9A85A19C37}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName=C:\Program Files\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputDir=D:\Projects\CurrentProjects\SCM_V2.0\SCM_Installer
OutputBaseFilename=SCM_V2.0_TeamExplorer_x64
Compression=lzma
SolidCompression=yes
ChangesEnvironment=true
UninstallRestartComputer=true

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "D:\Projects\CurrentProjects\SCM_V2.0\SCM_x64\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "D:\Projects\CurrentProjects\SCM_V2.0\SCM_x64\TeamExplorerOverlays.dll"; DestDir: "{app}"; Flags:ignoreversion regserver
Source: "D:\Projects\CurrentProjects\SCM_V2.0\SCM_x64\TeamExplorerOverlays.dll"; DestDir: "{app}"; Flags:regtypelib
Source: "D:\Projects\CurrentProjects\SCM_V2.0\SCM_x64\TeamExplorerShellMenu.dll"; DestDir: "{app}"; Flags:ignoreversion regserver
Source: "D:\Projects\CurrentProjects\SCM_V2.0\SCM_x64\TeamExplorerShellMenu.dll"; DestDir: "{app}"; Flags:regtypelib
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: HKCR; Subkey: "*\shellex\ContextMenuHandlers\TeamExplorer"; ValueType: string; ValueName: ""; ValueData: "{{A53268F8-176C-4C49-AB0C-7813F69361FF}"; Flags: uninsdeletekey 
Root: HKCR; Subkey: "Directory\shellex\ContextMenuHandlers\TeamExplorer"; ValueType: string; ValueName: ""; ValueData: "{{A53268F8-176C-4C49-AB0C-7813F69361FF}"; Flags: uninsdeletekey 
Root: HKLM64; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers\00TeamExplorerReadOnly"; ValueType: string; ValueName: ""; ValueData: "{{9A3FEB2B-8A44-4840-B494-51DD21C256AC}"; Flags: uninsdeletekey 
Root: HKLM64; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers\01TeamExplorerAdd"; ValueType: string; ValueName: ""; ValueData: "{{60886D45-2842-47FC-915C-711DC3C220C8}"; Flags: uninsdeletekey 
Root: HKLM64; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers\02TeamExplorerReadWrite"; ValueType: string; ValueName: ""; ValueData: "{{4B5FE33A-F677-460C-8925-9772D92A4475}"; Flags: uninsdeletekey 
Root: HKLM64; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers\03TeamExplorerModify"; ValueType: string; ValueName: ""; ValueData: "{{90A76876-02C2-4E62-B798-B63B002636F0}"; Flags: uninsdeletekey 
Root: HKLM64; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers\04TeamExplorerConflict"; ValueType: string; ValueName: ""; ValueData: "{{661CC6B0-27F4-4392-A807-454025AC4E55}"; Flags: uninsdeletekey 
Root: HKLM64; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers\05TeamExplorerUnversion"; ValueType: string; ValueName: ""; ValueData: "{{7146F01D-543B-4DDB-BB9A-74E483DE4E27}"; Flags: uninsdeletekey 
                                                     
[code]
procedure SetEnv(aEnvName, aEnvValue: string; aIsInstall, aIsInsForAllUser: Boolean);
var
sOrgValue: string;
S1, sFileName, sInsFlag: string;
bRetValue, bInsForAllUser: Boolean;
SL: TStringList;
x: integer;
begin
bInsForAllUser := aIsInsForAllUser;
if UsingWinNT then
begin
    if bInsForAllUser then
      bRetValue := RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', aEnvName, sOrgValue)
    else
      bRetValue := RegQueryStringValue(HKEY_CURRENT_USER, 'Environment', aEnvName, sOrgValue)
    sOrgValue := Trim(sOrgValue);
    begin
      S1 := aEnvValue;
      if pos(Uppercase(sOrgValue), Uppercase(s1)) = 0 then
      begin
        if aIsInstall then
        begin
          x := Length(sOrgValue);
          if (x > 0) and (StringOfChar(sOrgValue[x], 1) <> ';') then
            sOrgValue := sOrgValue + ';';
          sOrgValue := sOrgValue + S1;
        end;
      end else
      begin
        if not aIsInstall then
        begin
          StringChangeEx(sOrgValue, S1 + ';', '', True);
          StringChangeEx(sOrgValue, S1, '', True);
        end;
      end;

      if bInsForAllUser then
        RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', aEnvName, sOrgValue)
      else
      begin
        if (not aIsInstall) and (Trim(sOrgValue) = '') then
          RegDeleteValue(HKEY_CURRENT_USER, 'Environment', aEnvName)
        else
          RegWriteStringValue(HKEY_CURRENT_USER, 'Environment', aEnvName, sOrgValue);
      end;
    end;
end else
begin
    SL := TStringList.Create;
    try
      sFileName := ExpandConstant('{sd}\autoexec.bat');
      LoadStringFromFile(sFileName, S1);
      SL.Text := s1;
      s1 :=   '"' + aEnvValue + '"';
      s1 := 'set '+aEnvName +'=%path%;' + s1 ;

      bRetValue := False;
      x := SL.IndexOf(s1);
      if x = -1 then
      begin
        if aIsInstall then
        begin
          SL.Add(s1);
          bRetValue := True;
        end;
      end else
        if not aIsInstall then
        begin
          SL.Delete(x);
          bRetValue := True;
        end;

      if bRetValue then
        SL.SaveToFile(sFileName);
    finally
      SL.free;
    end;

end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
if CurStep = ssPostInstall then
begin
   SetEnv('path',ExpandConstant('{app}'),true,true);
end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  SetEnv('path',ExpandConstant('{app}'),false,true);
end;

